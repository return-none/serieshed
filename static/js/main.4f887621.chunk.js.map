{"version":3,"sources":["assets/logo.svg","components/Navbar.tsx","store/hooks.ts","store/series/index.ts","components/Input.tsx","assets/error.svg","assets/loading.svg","assets/info.svg","components/Boxes.tsx","components/SeriesList.tsx","screens/Home.tsx","utils.ts","components/SeriesDetail.tsx","screens/Details.tsx","App.tsx","store/index.ts","serviceWorker.ts","index.tsx"],"names":["Header","styled","header","Img","img","Navbar","draggable","to","src","logo","alt","useAppDispatch","useDispatch","useAppSelector","useSelector","BASE_API_URL","REMOVE_HTML_REGEX","SERIES_PLACEHOLDER","callAPI","url","fetch","then","resp","ok","json","Error","statusText","fetchSeriesAsync","createAsyncThunk","_","a","getState","requestId","state","loading","series","list","status","currentRequestId","encodeURIComponent","search","data","map","item","id","show","name","summary","replace","image","original","fetchDetailsAsync","seriesId","details","undefined","seriesCachedWithEpisodes","items","seriesCached","find","String","episodes","season","episode","number","seriesSlice","createSlice","initialState","error","reducers","setSearch","action","payload","flushSeries","extraReducers","builder","addCase","pending","meta","fulfilled","rejected","message","arg","actions","InputStyled","input","Input","props","autoComplete","type","placeholder","value","onChange","event","target","Wrap","h1","div","LoadingImg","Loading","width","Text","p","Issue","text","Info","info","SeriesCardHolder","SeriesCard","className","SeriesGrid","SeriesList","InputSection","section","Home","useState","setPending","dispatch","requestSeries","useMemo","fn","delay","timeout","clearTimeout","args","setTimeout","debounce","useCallback","newSearch","length","Details","Section","Season","EpisodesList","EpisodeDetails","SeriesDetails","episodesMapped","pipe","groupBy","toPairs","sort","b","Number","WrapStart","useParams","useEffect","SeriesDetail","Main","main","App","path","element","store","configureStore","reducer","seriesReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"0PAAe,MAA0B,iC,OCMnCA,EAASC,IAAOC,OAAV,6SAkBNC,EAAMF,IAAOG,IAAV,2FAaMC,EARA,kBACb,cAACL,EAAD,UACE,cAAC,IAAD,CAAMM,WAAW,EAAOC,GAAG,IAA3B,SACE,cAACJ,EAAD,CAAKK,IAAKC,EAAMC,IAAI,OAAOJ,WAAW,S,OC7B/BK,EAAiB,kBAAMC,eACvBC,EAAkDC,I,iCCEzDC,EAAe,yBAKfC,EAAoB,gBAEpBC,EACJ,0GAKIC,EAAU,SAACC,GACf,OAAOC,MAAMD,GAAKE,MAAK,SAACC,GACtB,GAAIA,EAAKC,GACP,OAAOD,EAAKE,OAGd,MAAM,IAAIC,MAAMH,EAAKI,gBAyCZC,EAAmBC,YAC9B,qBAD8C,uCAE9C,WAAOC,EAAP,gCAAAC,EAAA,yDAAYC,EAAZ,EAAYA,SAAUC,EAAtB,EAAsBA,UAEdC,EAAQF,IACRG,EAAUD,EAAME,OAAOC,KAAKC,OAC5BC,EAAmBL,EAAME,OAAOC,KAAKE,iBAC3B,YAAZJ,GAAyBF,IAAcM,EAL7C,wDASQnB,EACJJ,EAvEkB,gBAuElB,aAEMwB,mBAAmBN,EAAME,OAAOK,SAZ1C,SAectB,EAAQC,GAftB,cAaQsB,EAbR,OAiBQN,EAAmBM,EAAKC,KAAI,SAACC,GAAD,MAAW,CAC3CC,GAAID,EAAKE,KAAKD,GACdE,KAAMH,EAAKE,KAAKC,KAChBC,QACwB,OAAtBJ,EAAKE,KAAKE,QACN,GACAJ,EAAKE,KAAKE,QAAQC,QAAQhC,EAAmB,IACnDiC,MAASN,EAAKE,KAAKI,MACfN,EAAKE,KAAKI,MAAMC,SAChBjC,EAAmB+B,QACjB,SACAT,mBAAmBI,EAAKE,KAAKC,WA5BvC,kBAgCSX,GAhCT,4CAF8C,yDAsCnCgB,EAAoBvB,YAC/B,sBAD+C,uCAE/C,WAAOwB,EAAP,0CAAAtB,EAAA,yDAA2BC,EAA3B,EAA2BA,SAAUC,EAArC,EAAqCA,UAE7BC,EAAQF,IACRG,EAAUD,EAAME,OAAOkB,QAAQhB,OAC/BC,EAAmBL,EAAME,OAAOkB,QAAQf,iBAC9B,YAAZJ,GAAyBF,IAAcM,EAL7C,yDAWmCgB,KAD3BC,EAA2BtB,EAAME,OAAOkB,QAAQG,MAAMJ,IAV9D,yCAYWG,GAZX,eAqBuBD,KAHfG,EAAexB,EAAME,OAAOC,KAAKoB,MAAME,MAC3C,SAACvB,GAAD,OAAoBwB,OAAOxB,EAAOS,MAAQQ,MAnB9C,iBAsBIjB,EAASsB,EAtBb,+BAwBUtC,EAAMJ,EA1HS,cA0HyBiC,QAAQ,OAAQI,GAxBlE,UAyBkClC,EAAQC,GAzB1C,QAyBUsB,EAzBV,OA0BIN,EAAS,CACPS,GAAIH,EAAKG,GACTE,KAAML,EAAKK,KACXC,QACmB,OAAjBN,EAAKM,QACD,GACAN,EAAKM,QAAQC,QAAQhC,EAAmB,IAC9CiC,MACiB,OAAfR,EAAKQ,MACDR,EAAKQ,MAAMC,SACXjC,EAAmB+B,QACjB,SACAT,mBAAmBE,EAAKK,QAtCtC,eA2CQ3B,EAAMJ,EA5IY,uBA4IuBiC,QAAQ,OAAQI,GA3CjE,UA4CoClC,EAAQC,GA5C5C,eA4CQsB,EA5CR,OA8CQmB,EAAWnB,EAAKC,KAAI,SAACC,GAAD,MAAwB,CAChDC,GAAID,EAAKC,GACTE,KAAMH,EAAKG,KACXC,QACmB,OAAjBJ,EAAKI,QACD,GACAJ,EAAKI,QAAQC,QAAQhC,EAAmB,IAC9C6C,OAAQlB,EAAKkB,OACbC,QAASnB,EAAKoB,OACdd,MACiB,OAAfN,EAAKM,MACDN,EAAKM,MAAMC,SAlJrB,0GAmJ8BF,QAAQ,SAAUT,mBAAmBI,EAAKG,WA1DxE,kBA6DS,CACLX,SACAyB,aA/DJ,4CAF+C,yDAsEpCI,EAAcC,YAAY,CACrCnB,KAAM,SACNoB,aA9HgC,CAChC1B,OAAQ,GACRJ,KAAM,CACJoB,MAAO,GACPnB,OAAQ,OACR8B,MAAO,KACP7B,iBAAkB,IAEpBe,QAAS,CACPG,MAAO,GACPnB,OAAQ,OACR8B,MAAO,KACP7B,iBAAkB,KAmHpB8B,SAAU,CACRC,UAAW,SAACpC,EAAOqC,GACjBrC,EAAMO,OAAS8B,EAAOC,SAExBC,YAAa,SAACvC,GACZA,EAAMG,KAAKoB,MAAQ,KAGvBiB,cAAe,SAACC,GACdA,EACGC,QAAQhD,EAAiBiD,SAAS,SAAC3C,EAAOqC,GACf,SAAtBrC,EAAMG,KAAKC,QAA2C,cAAtBJ,EAAMG,KAAKC,SAC7CJ,EAAMG,KAAKoB,MAAQ,GACnBvB,EAAMG,KAAK+B,MAAQ,KACnBlC,EAAMG,KAAKC,OAAS,UACpBJ,EAAMG,KAAKE,iBAAmBgC,EAAOO,KAAK7C,cAG7C2C,QAAQhD,EAAiBmD,WAAW,SAAC7C,EAAOqC,GAAY,IAC/CtC,EAAcsC,EAAOO,KAArB7C,UACR,GACwB,YAAtBC,EAAMG,KAAKC,QACXJ,EAAMG,KAAKE,mBAAqBN,EAChC,CACA,IAAMG,EAASmC,EAAOC,QACtBtC,EAAMG,KAAKC,OAAS,YACpBJ,EAAMG,KAAKoB,MAAQrB,EACnBF,EAAMG,KAAKE,iBAAmB,OAGjCqC,QAAQhD,EAAiBoD,UAAU,SAAC9C,EAAOqC,GAAY,IAC9CtC,EAAcsC,EAAOO,KAArB7C,UAEgB,YAAtBC,EAAMG,KAAKC,QACXJ,EAAMG,KAAKE,mBAAqBN,IAEhCC,EAAMG,KAAKoB,MAAQ,GACnBvB,EAAMG,KAAKC,OAAS,WACpBJ,EAAMG,KAAK+B,MAAQG,EAAOH,MAAMa,QAChC/C,EAAMG,KAAKE,iBAAmB,OAIpCoC,EACGC,QAAQxB,EAAkByB,SAAS,SAAC3C,EAAOqC,GAChB,SAAtBrC,EAAMG,KAAKC,QAA2C,cAAtBJ,EAAMG,KAAKC,SAC7CJ,EAAMoB,QAAQc,MAAQ,KACtBlC,EAAMoB,QAAQhB,OAAS,UACvBJ,EAAMoB,QAAQf,iBAAmBgC,EAAOO,KAAK7C,cAGhD2C,QAAQxB,EAAkB2B,WAAW,SAAC7C,EAAOqC,GAAY,IAAD,EAC5BA,EAAOO,KAA1B7C,EAD+C,EAC/CA,UAAWiD,EADoC,EACpCA,IAEQ,YAAzBhD,EAAMoB,QAAQhB,QACdJ,EAAMoB,QAAQf,mBAAqBN,IAEnCC,EAAMoB,QAAQhB,OAAS,YACvBJ,EAAMoB,QAAQG,MAAMyB,GAAOX,EAAOC,QAIlCtC,EAAMoB,QAAQf,iBAAmB,OAGpCqC,QAAQxB,EAAkB4B,UAAU,SAAC9C,EAAOqC,GAAY,IAC/CtC,EAAcsC,EAAOO,KAArB7C,UAEmB,YAAzBC,EAAMoB,QAAQhB,QACdJ,EAAMoB,QAAQf,mBAAqBN,IAEnCC,EAAMoB,QAAQhB,OAAS,WACvBJ,EAAMoB,QAAQc,MAAQG,EAAOH,MAAMa,QACnC/C,EAAMoB,QAAQf,iBAAmB,U,EAMD0B,EAAYkB,QAAvCV,E,EAAAA,YAAaH,E,EAAAA,UAEbL,IAAf,QC9PMmB,GAAclF,IAAOmF,MAAV,4TAwCFC,GAjBD,SAACC,GAKb,OACE,cAACH,GAAD,CACEI,aAAa,MACbC,KAAMF,EAAME,KACZ1C,KAAMwC,EAAMxC,KACZ2C,YAAaH,EAAMG,YACnBC,MAAOJ,EAAMI,MACbC,SAXa,SAACC,GAChBN,EAAMK,SAASC,EAAMC,OAAOH,WC7BjB,OAA0B,kCCA1B,OAA0B,oCCA1B,OAA0B,iCCgBnCI,IAVS7F,IAAO8F,GAAV,iFAUC9F,IAAO+F,IAAV,4NAUJC,GAAahG,IAAOG,IAAV,wMAaH8F,GAAU,kBACrB,cAACJ,GAAD,UACE,cAACG,GAAD,CAAYzF,IAAK0B,GAASiE,MAAM,MAAMzF,IAAI,UAAUJ,WAAW,OAI7D8F,GAAOnG,IAAOoG,EAAV,iEAKGC,GAAQ,SAAChB,GAAD,OACnB,eAACQ,GAAD,WACE,qBAAKtF,IAAK2D,GAAOgC,MAAM,MAAMzF,IAAI,QAAQJ,WAAW,MACjDgF,EAAMiB,MAAQ,cAACH,GAAD,UAAOd,EAAMiB,WAIrBC,GAAO,SAAClB,GAAD,OAClB,eAACQ,GAAD,WACE,qBAAKtF,IAAKiG,GAAMN,MAAM,MAAMzF,IAAI,OAAOJ,WAAW,MAC/CgF,EAAMiB,MAAQ,cAACH,GAAD,UAAOd,EAAMiB,WCtD5BG,GAAmBzG,IAAO+F,IAAV,wvBA2ChBW,GAAa,SAACrB,GAAD,OACjB,cAACoB,GAAD,UACE,eAAC,IAAD,CAAMpG,WAAW,EAAOC,GAAE,mBAAc+E,EAAM3C,KAAKC,IAAnD,UACE,qBACEgE,UAAU,SACVpG,IAAK8E,EAAM3C,KAAKM,MAChBvC,IAAK4E,EAAM3C,KAAKG,KAChBxC,WAAW,IAEb,sBAAKsG,UAAU,UAAf,UACE,oBAAIA,UAAU,SAAd,SAAwBtB,EAAM3C,KAAKG,OACnC,mBAAG8D,UAAU,UAAb,SAAwBtB,EAAM3C,KAAKI,mBAOrC8D,GAAa5G,IAAO+F,IAAV,6OAkBDc,GARI,SAACxB,GAAD,OACjB,cAACuB,GAAD,UACGvB,EAAMlD,KAAKM,KAAI,SAACC,GAAD,OACd,cAAC,GAAD,CAA0BA,KAAMA,GAAfA,EAAKC,UC/DtBmE,GAAe9G,IAAO+G,QAAV,kNAUZlB,GAAO7F,IAAO+F,IAAV,kKAuEKiB,GA9DF,WAAO,IAAD,EACaC,oBAAkB,GAD/B,mBACVtC,EADU,KACDuC,EADC,OAGuBtG,GACtC,SAACoB,GAAD,MAAuB,CACrBI,OAAQJ,EAAME,OAAOC,KAAKC,OAC1BD,KAAMH,EAAME,OAAOC,KAAKoB,MACxBhB,OAAQP,EAAME,OAAOK,OACrB2B,MAAOlC,EAAME,OAAOC,KAAK+B,UALrB9B,EAHS,EAGTA,OAAQD,EAHC,EAGDA,KAAMI,EAHL,EAGKA,OAAQ2B,EAHb,EAGaA,MAQxBiD,EAAWzG,IAEX0G,EAAgBC,mBAAQ,WAC5B,OClDoB,SAACC,EAAgBC,GACvC,IAAIC,GAAgB,EAEpB,OAAO,YACY,IAAbA,GACFC,aAAaD,GAFU,2BAAhBE,EAAgB,yBAAhBA,EAAgB,gBAKzBF,EAAUG,WAAU,WAAV,GAAWL,EAAIC,GAAf,OAAyBG,KD0C5BE,EAAS,WACdV,GAAW,GACXC,EAASzF,OArCU,OAuCpB,CAACyF,IAEEzB,EAAWmC,uBACf,SAACC,GACCX,EAAS/C,EAAU0D,IACfA,EAAUC,OAAS,GACrBb,GAAW,GACXE,KAEAD,EAAS5C,OAGb,CAAC4C,EAAUC,IAGb,OACE,eAAC,GAAD,WACE,cAACN,GAAD,UACE,cAAC,GAAD,CACEvB,KAAK,OACL1C,KAAK,SACL2C,YAAY,SACZC,MAAOlD,EACPmD,SAAUA,MAGd,oCACc,cAAXtD,GAA0BG,EAAOwF,OAAS,GAAK5F,EAAK4F,OAAS,GAC5D,cAAC,GAAD,CAAY5F,KAAMA,IAGR,YAAXC,GAAwBG,EAAOwF,OAAS,GAAK,cAAC,GAAD,IAElC,aAAX3F,GAAyB,cAAC,GAAD,CAAOkE,KAAMpC,IAE3B,cAAX9B,GACCG,EAAOwF,OAAS,GACA,IAAhB5F,EAAK4F,SACJpD,GAAW,cAAC,GAAD,CAAM2B,KAAK,yB,oGElF3B0B,GAAUhI,IAAO+F,IAAV,4gBA2BPkC,GAAUjI,IAAO+G,QAAV,wQAcPmB,GAASlI,IAAO+F,IAAV,2TAoBNoC,GAAenI,IAAO+F,IAAV,8OAgBZqC,GAAiBpI,IAAO+F,IAAV,m0BAwHLsC,GApEO,SAAChD,GAOrB,IAAMiD,EAA4DC,KAChEC,MAAQ,SAAC3E,GAAD,gBAAyBA,EAAQD,WACzC6E,KACAC,MACE,SAAC7G,EAAwB8G,GAAzB,OACEC,OAAO/G,EAAE,IAAM+G,OAAOD,EAAE,OAE5BlG,MAAI,mCAAEmB,EAAF,KAAUD,EAAV,WAA8C,CAChDC,SACAD,SAAU+E,MACR,SAAC7G,EAAY8G,GAAb,OAA4BC,OAAO/G,EAAEgC,SAAW+E,OAAOD,EAAE9E,WACzDF,OAX4D4E,CAchElD,EAAM3C,KAAKiB,UAEb,OACE,eAACsE,GAAD,WACE,gCACE,eAAC,GAAD,WACE,qBACEtB,UAAU,SACVpG,IAAK8E,EAAM3C,KAAKR,OAAOc,MACvBvC,IAAK4E,EAAM3C,KAAKR,OAAOW,KACvBxC,WAAW,IAEb,sBAAKsG,UAAU,UAAf,UACE,oBAAIA,UAAU,SAAd,SAAwBtB,EAAM3C,KAAKR,OAAOW,OAC1C,mBAAG8D,UAAU,UAAb,SAAwBtB,EAAM3C,KAAKR,OAAOY,kBAKhD,8BACGwF,EAAeP,OACdO,EAAe7F,KAAI,SAACmB,GAAD,OACjB,eAACsE,GAAD,WACE,qBAAIvB,UAAU,SAAd,oBAA+B/C,EAAOA,UACtC,cAACuE,GAAD,UACGvE,EAAOD,SAASlB,KAAI,SAACoB,GAAD,OACnB,eAACuE,GAAD,WACE,qBACEzB,UAAU,SACVpG,IAAKsD,EAAQb,MACbvC,IAAKoD,EAAQhB,KACbxC,WAAW,IAEb,mBAAGsG,UAAU,QAAb,SAAsB9C,EAAQhB,SAPXe,EAAOA,OAAS,IAAMC,EAAQA,gBAJ5CD,EAAOA,WAkBtB,iEC3LJiC,GAAO7F,IAAO+F,IAAV,+JASJ8C,GAAY7I,YAAO6F,GAAP7F,CAAH,kDAqCAgI,GAjCC,WAAO,IACbrF,EAAOmG,cAAPnG,GAGFwE,EAAWzG,IAJG,EAMcE,GAAe,SAACoB,GAAD,MAAuB,CACtEE,OAAQF,EAAME,OAAOkB,QAAQG,MAAMZ,GACnCP,OAAQJ,EAAME,OAAOkB,QAAQhB,OAC7B8B,MAAOlC,EAAME,OAAOkB,QAAQc,UAHtBhC,EANY,EAMZA,OAAQE,EANI,EAMJA,OAAQ8B,EANJ,EAMIA,MAYxB,OANA6E,qBAAU,gBACO1F,IAAXnB,GACFiF,EAASjE,EAAkBP,MAE5B,CAACA,EAAIT,EAAQiF,IAEE,cAAX/E,QAAqCiB,IAAXnB,EAC/B,cAAC2G,GAAD,UACE,cAACG,GAAD,CAActG,KAAMR,MAET,YAAXE,EACF,cAAC,GAAD,UACE,cAAC,GAAD,MAEW,aAAXA,EACF,cAAC,GAAD,UACE,cAAC,GAAD,CAAOkE,KAAMpC,MAEb,MC/CA+E,GAAOjJ,IAAOkJ,KAAV,sVA0BKC,GAZH,kBACV,eAAC,IAAD,WACE,cAAC,EAAD,IACA,cAACF,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOG,KAAK,IAAIC,QAAS,cAAC,GAAD,MACzB,cAAC,IAAD,CAAOD,KAAK,eAAeC,QAAS,cAAC,GAAD,eCzB/BC,GAAQC,YAAe,CAClCC,QAAS,CACPtH,OAAQuH,KCMQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUX,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJY,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlJ,MAAK,SAACmJ,GACLA,EAAaC,gBAEdC,OAAM,SAACvG,GACNwG,QAAQxG,MAAMA,EAAMa,c","file":"static/js/main.4f887621.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.c28e0e51.svg\";","import { Link } from 'react-router-dom';\n\nimport styled from 'styled-components';\n\nimport logo from 'assets/logo.svg';\n\nconst Header = styled.header`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n  padding: var(--navbar-padding);\n\n  user-select: none;\n\n  background-color: rgb(var(--success-rgb));\n\n  position: fixed;\n  top: 0;\n  right: 0;\n  left: 0;\n  z-index: 1000;\n`;\n\nconst Img = styled.img`\n  vertical-align: middle;\n  height: var(--main-logo-height);\n`;\n\nconst Navbar = () => (\n  <Header>\n    <Link draggable={false} to=\"/\">\n      <Img src={logo} alt=\"logo\" draggable={false} />\n    </Link>\n  </Header>\n);\n\nexport default Navbar;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from 'store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { RootState } from 'store';\n\nimport { Series, SeriesAPI, Episode, EpisodesAPI } from 'types';\n\nconst BASE_API_URL = 'https://api.tvmaze.com';\nconst SERIES_LIST_URL = '/search/shows';\nconst SERIES_DETAILS_URL = '/shows/{id}';\nconst SERIES_EPISODES_URL = '/shows/{id}/episodes';\n\nconst REMOVE_HTML_REGEX = /(<([^>]+)>)/gi;\n\nconst SERIES_PLACEHOLDER =\n  'https://images.placeholders.dev/?width=249&height=373&text={name}&bgColor=%23E9E9E9&textColor=%23212529';\n\nconst EPISODE_PLACEHOLDER =\n  'https://images.placeholders.dev/?width=427&height=240&text={name}&bgColor=%23E9E9E9&textColor=%23212529';\n\nconst callAPI = (url: string) => {\n  return fetch(url).then((resp) => {\n    if (resp.ok) {\n      return resp.json();\n    }\n\n    throw new Error(resp.statusText);\n  });\n};\n\nexport type seriesState = {\n  search: string;\n  list: {\n    items: Series[];\n    status: 'idle' | 'pending' | 'fulfilled' | 'rejected';\n    error: null | string;\n    currentRequestId: string;\n  };\n  details: {\n    items: {\n      [key: string]: {\n        series: Series;\n        episodes: Episode[];\n      };\n    };\n    status: 'idle' | 'pending' | 'fulfilled' | 'rejected';\n    error: null | string;\n    currentRequestId: string;\n  };\n};\n\nconst initialState: seriesState = {\n  search: '',\n  list: {\n    items: [],\n    status: 'idle',\n    error: null,\n    currentRequestId: ''\n  },\n  details: {\n    items: {},\n    status: 'idle',\n    error: null,\n    currentRequestId: ''\n  }\n};\n\nexport const fetchSeriesAsync = createAsyncThunk(\n  'series/fetchSeries',\n  async (_, { getState, requestId }) => {\n    // stop double requests\n    const state = getState() as RootState;\n    const loading = state.series.list.status;\n    const currentRequestId = state.series.list.currentRequestId;\n    if (loading !== 'pending' || requestId !== currentRequestId) {\n      return;\n    }\n\n    const url =\n      BASE_API_URL +\n      SERIES_LIST_URL +\n      `?q=${encodeURIComponent(state.series.search)}`;\n    const data: {\n      show: SeriesAPI;\n    }[] = await callAPI(url);\n\n    const series: Series[] = data.map((item) => ({\n      id: item.show.id,\n      name: item.show.name,\n      summary:\n        item.show.summary === null\n          ? ''\n          : item.show.summary.replace(REMOVE_HTML_REGEX, ''),\n      image: !!item.show.image\n        ? item.show.image.original\n        : SERIES_PLACEHOLDER.replace(\n            '{name}',\n            encodeURIComponent(item.show.name)\n          )\n    }));\n\n    return series;\n  }\n);\n\nexport const fetchDetailsAsync = createAsyncThunk(\n  'series/fetchDetails',\n  async (seriesId: string, { getState, requestId }) => {\n    // stop double requests\n    const state = getState() as RootState;\n    const loading = state.series.details.status;\n    const currentRequestId = state.series.details.currentRequestId;\n    if (loading !== 'pending' || requestId !== currentRequestId) {\n      return;\n    }\n\n    // Full Caching\n    const seriesCachedWithEpisodes = state.series.details.items[seriesId];\n    if (seriesCachedWithEpisodes !== undefined) {\n      return seriesCachedWithEpisodes;\n    }\n\n    let series: Series;\n\n    // Series Caching\n    const seriesCached = state.series.list.items.find(\n      (series: Series) => String(series.id) === seriesId\n    );\n    if (seriesCached !== undefined) {\n      series = seriesCached;\n    } else {\n      const url = BASE_API_URL + SERIES_DETAILS_URL.replace('{id}', seriesId);\n      const data: SeriesAPI = await callAPI(url);\n      series = {\n        id: data.id,\n        name: data.name,\n        summary:\n          data.summary === null\n            ? ''\n            : data.summary.replace(REMOVE_HTML_REGEX, ''),\n        image:\n          data.image !== null\n            ? data.image.original\n            : SERIES_PLACEHOLDER.replace(\n                '{name}',\n                encodeURIComponent(data.name)\n              )\n      };\n    }\n\n    const url = BASE_API_URL + SERIES_EPISODES_URL.replace('{id}', seriesId);\n    const data: EpisodesAPI[] = await callAPI(url);\n\n    const episodes = data.map((item: EpisodesAPI) => ({\n      id: item.id,\n      name: item.name,\n      summary:\n        item.summary === null\n          ? ''\n          : item.summary.replace(REMOVE_HTML_REGEX, ''),\n      season: item.season,\n      episode: item.number,\n      image:\n        item.image !== null\n          ? item.image.original\n          : EPISODE_PLACEHOLDER.replace('{name}', encodeURIComponent(item.name))\n    }));\n\n    return {\n      series,\n      episodes\n    };\n  }\n);\n\nexport const seriesSlice = createSlice({\n  name: 'series',\n  initialState,\n  reducers: {\n    setSearch: (state, action: PayloadAction<string>) => {\n      state.search = action.payload;\n    },\n    flushSeries: (state) => {\n      state.list.items = [];\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchSeriesAsync.pending, (state, action) => {\n        if (state.list.status === 'idle' || state.list.status === 'fulfilled') {\n          state.list.items = [];\n          state.list.error = null;\n          state.list.status = 'pending';\n          state.list.currentRequestId = action.meta.requestId;\n        }\n      })\n      .addCase(fetchSeriesAsync.fulfilled, (state, action) => {\n        const { requestId } = action.meta;\n        if (\n          state.list.status === 'pending' &&\n          state.list.currentRequestId === requestId\n        ) {\n          const series = action.payload as Series[];\n          state.list.status = 'fulfilled';\n          state.list.items = series;\n          state.list.currentRequestId = '';\n        }\n      })\n      .addCase(fetchSeriesAsync.rejected, (state, action) => {\n        const { requestId } = action.meta;\n        if (\n          state.list.status === 'pending' &&\n          state.list.currentRequestId === requestId\n        ) {\n          state.list.items = [];\n          state.list.status = 'rejected';\n          state.list.error = action.error.message as string;\n          state.list.currentRequestId = '';\n        }\n      });\n\n    builder\n      .addCase(fetchDetailsAsync.pending, (state, action) => {\n        if (state.list.status === 'idle' || state.list.status === 'fulfilled') {\n          state.details.error = null;\n          state.details.status = 'pending';\n          state.details.currentRequestId = action.meta.requestId;\n        }\n      })\n      .addCase(fetchDetailsAsync.fulfilled, (state, action) => {\n        const { requestId, arg } = action.meta;\n        if (\n          state.details.status === 'pending' &&\n          state.details.currentRequestId === requestId\n        ) {\n          state.details.status = 'fulfilled';\n          state.details.items[arg] = action.payload as {\n            series: Series;\n            episodes: Episode[];\n          };\n          state.details.currentRequestId = '';\n        }\n      })\n      .addCase(fetchDetailsAsync.rejected, (state, action) => {\n        const { requestId } = action.meta;\n        if (\n          state.details.status === 'pending' &&\n          state.details.currentRequestId === requestId\n        ) {\n          state.details.status = 'rejected';\n          state.details.error = action.error.message as string;\n          state.details.currentRequestId = '';\n        }\n      });\n  }\n});\n\nexport const { flushSeries, setSearch } = seriesSlice.actions;\n\nexport default seriesSlice.reducer;\n","import React from 'react';\n\nimport styled from 'styled-components';\n\nconst InputStyled = styled.input`\n  display: block;\n  width: 100%;\n  padding: 0.375rem 0.75rem;\n  font-size: 1rem;\n  font-weight: 400;\n  line-height: 1.5;\n  border: 1px solid transparent;\n  box-shadow: 0 0.25rem 0.25rem rgba(var(--main-color-rgb), 0.075);\n  border-radius: var(--border-radius);\n  outline: none;\n`;\n\ntype InputProps = {\n  // [TODO] More types\n  type: 'text';\n  name: string;\n  placeholder?: string;\n\n  value: string;\n  onChange: (value: string) => void;\n};\n\nconst Input = (props: InputProps) => {\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    props.onChange(event.target.value);\n  };\n\n  return (\n    <InputStyled\n      autoComplete=\"off\"\n      type={props.type}\n      name={props.name}\n      placeholder={props.placeholder}\n      value={props.value}\n      onChange={onChange}\n    />\n  );\n};\n\nexport default Input;\n","export default __webpack_public_path__ + \"static/media/error.50f3426a.svg\";","export default __webpack_public_path__ + \"static/media/loading.407fa58c.svg\";","export default __webpack_public_path__ + \"static/media/info.ba1c27c8.svg\";","import styled from 'styled-components';\n\nimport error from 'assets/error.svg';\nimport loading from 'assets/loading.svg';\nimport info from 'assets/info.svg';\n\nconst Header = styled.h1`\n  text-align: center;\n  margin: 0;\n  width: 100%;\n`;\n\nexport const HereBeDragons = (props: { text?: string }) => (\n  <Header>{!!props.text ? props.text : 'here be dragons'}</Header>\n);\n\nconst Wrap = styled.div`\n  padding: 1rem;\n  background: rgb(var(--white-rgb));\n  border-radius: var(--border-radius);\n\n  box-shadow: 0 0.25rem 0.25rem rgba(var(--main-color-rgb), 0.075);\n\n  user-select: none;\n`;\n\nconst LoadingImg = styled.img`\n  animation: flip 2s infinite linear;\n\n  @keyframes flip {\n    from {\n      transform: rotateX(0deg);\n    }\n    to {\n      transform: rotateX(-180deg);\n    }\n  }\n`;\n\nexport const Loading = () => (\n  <Wrap>\n    <LoadingImg src={loading} width=\"120\" alt=\"loading\" draggable={false} />\n  </Wrap>\n);\n\nconst Text = styled.p`\n  margin: 0;\n  text-align: center;\n`;\n\nexport const Issue = (props: { text?: string | null }) => (\n  <Wrap>\n    <img src={error} width=\"120\" alt=\"error\" draggable={false} />\n    {!!props.text && <Text>{props.text}</Text>}\n  </Wrap>\n);\n\nexport const Info = (props: { text?: string | null }) => (\n  <Wrap>\n    <img src={info} width=\"120\" alt=\"info\" draggable={false} />\n    {!!props.text && <Text>{props.text}</Text>}\n  </Wrap>\n);\n","import styled from 'styled-components';\n\nimport { Link } from 'react-router-dom';\n\nimport { Series } from 'types';\n\nconst SeriesCardHolder = styled.div`\n  user-select: none;\n\n  background-color: rgb(var(--white-rgb));\n  border: 1px solid rgba(var(--white-rgb), 0.1);\n  border-radius: var(--border-radius);\n\n  transition: 300ms;\n\n  &:hover {\n    transform: scale(1.05);\n  }\n\n  & a {\n    text-decoration: none;\n    color: rgb(var(--main-color-rgb));\n  }\n\n  & .poster {\n    width: 100%;\n    border-radius: var(--border-radius) var(--border-radius) 0 0;\n  }\n\n  & .details {\n    padding: 0.5rem;\n\n    .header {\n      margin: 0;\n      margin-bottom: 0.5rem;\n      font-size: 1.25rem;\n    }\n\n    .summary {\n      margin: 0;\n\n      display: -webkit-box;\n      -webkit-line-clamp: 3;\n      -webkit-box-orient: vertical;\n      overflow: hidden;\n    }\n  }\n`;\n\nconst SeriesCard = (props: { item: Series }) => (\n  <SeriesCardHolder>\n    <Link draggable={false} to={`/details/${props.item.id}`}>\n      <img\n        className=\"poster\"\n        src={props.item.image}\n        alt={props.item.name}\n        draggable={false}\n      />\n      <div className=\"details\">\n        <h5 className=\"header\">{props.item.name}</h5>\n        <p className=\"summary\">{props.item.summary}</p>\n      </div>\n    </Link>\n  </SeriesCardHolder>\n);\n\n// [TODO] make this responsive\nconst SeriesGrid = styled.div`\n  display: grid;\n  gap: 1rem;\n  grid-template-columns: repeat(4, 1fr);\n\n  @media only screen and (min-device-width: 320px) and (max-device-width: 667px) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`;\n\nconst SeriesList = (props: { list: Series[] }) => (\n  <SeriesGrid>\n    {props.list.map((item) => (\n      <SeriesCard key={item.id} item={item} />\n    ))}\n  </SeriesGrid>\n);\n\nexport default SeriesList;\n","import { useMemo, useCallback, useState } from 'react';\n\nimport styled from 'styled-components';\n\nimport { useAppSelector, useAppDispatch } from 'store/hooks';\nimport { setSearch, flushSeries, fetchSeriesAsync } from 'store/series';\n\nimport { debounce } from 'utils';\n\nimport { RootState } from 'store';\n\nimport Input from 'components/Input';\nimport { Loading, Issue, Info } from 'components/Boxes';\nimport SeriesList from 'components/SeriesList';\n\nconst DEBOUNCE_TIMEOUT = 1 * 1000;\n\nconst InputSection = styled.section`\n  width: 100%;\n  margin-bottom: 1.25rem;\n  padding: 0 1.25rem;\n\n  position: sticky;\n  top: calc(var(--main-logo-height) + var(--navbar-padding) * 2 + 1.25rem);\n  z-index: 10;\n`;\n\nconst Wrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 1.25rem;\n  width: 100%;\n`;\n\nconst Home = () => {\n  const [pending, setPending] = useState<boolean>(false);\n\n  const { status, list, search, error } = useAppSelector(\n    (state: RootState) => ({\n      status: state.series.list.status,\n      list: state.series.list.items,\n      search: state.series.search,\n      error: state.series.list.error\n    })\n  );\n  const dispatch = useAppDispatch();\n\n  const requestSeries = useMemo(() => {\n    return debounce(() => {\n      setPending(false);\n      dispatch(fetchSeriesAsync());\n    }, DEBOUNCE_TIMEOUT);\n  }, [dispatch]);\n\n  const onChange = useCallback(\n    (newSearch: string) => {\n      dispatch(setSearch(newSearch));\n      if (newSearch.length > 0) {\n        setPending(true);\n        requestSeries();\n      } else {\n        dispatch(flushSeries());\n      }\n    },\n    [dispatch, requestSeries]\n  );\n\n  return (\n    <Wrap>\n      <InputSection>\n        <Input\n          type=\"text\"\n          name=\"search\"\n          placeholder=\"Search\"\n          value={search}\n          onChange={onChange}\n        />\n      </InputSection>\n      <section>\n        {status === 'fulfilled' && search.length > 0 && list.length > 0 && (\n          <SeriesList list={list} />\n        )}\n\n        {status === 'pending' && search.length > 0 && <Loading />}\n\n        {status === 'rejected' && <Issue text={error} />}\n\n        {status === 'fulfilled' &&\n          search.length > 0 &&\n          list.length === 0 &&\n          !pending && <Info text=\"Nothing found\" />}\n      </section>\n    </Wrap>\n  );\n};\n\nexport default Home;\n","export const debounce = (fn: () => void, delay: number) => {\n  let timeout: any = -1;\n\n  return (...args: any[]) => {\n    if (timeout !== -1) {\n      clearTimeout(timeout);\n    }\n\n    timeout = setTimeout(fn, delay, ...args);\n  };\n};\n","import styled from 'styled-components';\n\nimport map from 'ramda/src/map';\nimport sort from 'ramda/src/sort';\nimport pipe from 'ramda/src/pipe';\nimport toPairs from 'ramda/src/toPairs';\nimport groupBy from 'ramda/src/groupBy';\n\nimport { Series, Episode } from 'types';\n\nconst Details = styled.div`\n  position: sticky;\n  top: calc(var(--main-logo-height) + var(--navbar-padding) * 2 + 1rem);\n\n  background-color: rgb(var(--white-rgb));\n\n  border: 1px solid rgba(var(--white-rgb), 0.1);\n  border-radius: var(--border-radius);\n\n  & .poster {\n    border-radius: var(--border-radius) var(--border-radius) 0 0;\n  }\n\n  & .details {\n    padding: 0.5rem;\n\n    .header {\n      margin: 0.25rem 0 0.25rem;\n    }\n\n    .summary {\n      margin: 0;\n      text-align: justify;\n    }\n  }\n`;\n\nconst Section = styled.section`\n  display: grid;\n  grid-template-columns: 22.5% 75%;\n  gap: 2.5%;\n\n  @media only screen and (min-device-width: 320px) and (max-device-width: 667px) {\n    grid-template-columns: 100%;\n  }\n\n  width: 100%;\n\n  user-select: none;\n`;\n\nconst Season = styled.div`\n  margin-bottom: 1rem;\n\n  background-color: rgb(var(--white-rgb));\n\n  padding: 0.5rem;\n\n  border: 1px solid rgba(var(--white-rgb), 0.1);\n  border-radius: var(--border-radius);\n\n  & .header {\n    margin: 0;\n    margin-left: 1rem;\n  }\n\n  &:last-child {\n    margin: 0;\n  }\n`;\n\nconst EpisodesList = styled.div`\n  display: flex;\n  flex-wrap: nowrap;\n  overflow-x: auto;\n\n  padding: 1rem;\n\n  // NO scrollbar\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`;\n\nconst EpisodeDetails = styled.div`\n  flex: 0 0 auto;\n  margin-right: 1.5rem;\n\n  transition: 300ms;\n\n  border-radius: var(--border-radius);\n\n  position: relative;\n\n  padding: 0;\n\n  &:hover {\n    transform: scale(1.05);\n\n    .title {\n      display: block;\n    }\n  }\n\n  &:last-child {\n    margin: 0;\n  }\n\n  img.poster {\n    width: 20rem;\n    vertical-align: middle;\n    border-radius: var(--border-radius);\n    padding: 0;\n  }\n\n  .title {\n    position: absolute;\n    left: 0;\n    right: 0;\n    bottom: 0;\n\n    border-radius: 0 0 var(--border-radius) var(--border-radius);\n\n    margin: 0;\n    padding: 0.5rem;\n    background-color: rgba(var(--black-rgb), 0.25);\n    color: rgb(var(--white-rgb));\n\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n\n    display: none;\n  }\n`;\n\nconst SeriesDetails = (props: {\n  item: {\n    series: Series;\n    episodes: Episode[];\n  };\n}) => {\n  // Map list of episodes to seasons list\n  const episodesMapped: { season: string; episodes: Episode[] }[] = pipe(\n    groupBy((episode: Episode) => `${episode.season}`),\n    toPairs,\n    sort(\n      (a: [string, Episode[]], b: [string, Episode[]]) =>\n        Number(a[0]) - Number(b[0])\n    ),\n    map(([season, episodes]: [string, Episode[]]) => ({\n      season,\n      episodes: sort(\n        (a: Episode, b: Episode) => Number(a.episode) - Number(b.episode),\n        episodes\n      )\n    }))\n  )(props.item.episodes);\n\n  return (\n    <Section>\n      <aside>\n        <Details>\n          <img\n            className=\"poster\"\n            src={props.item.series.image}\n            alt={props.item.series.name}\n            draggable={false}\n          />\n          <div className=\"details\">\n            <h2 className=\"header\">{props.item.series.name}</h2>\n            <p className=\"summary\">{props.item.series.summary}</p>\n          </div>\n        </Details>\n      </aside>\n\n      <div>\n        {episodesMapped.length ? (\n          episodesMapped.map((season) => (\n            <Season key={season.season}>\n              <h2 className=\"header\">Season {season.season}</h2>\n              <EpisodesList>\n                {season.episodes.map((episode) => (\n                  <EpisodeDetails key={season.season + '_' + episode.episode}>\n                    <img\n                      className=\"poster\"\n                      src={episode.image}\n                      alt={episode.name}\n                      draggable={false}\n                    />\n                    <p className=\"title\">{episode.name}</p>\n                  </EpisodeDetails>\n                ))}\n              </EpisodesList>\n            </Season>\n          ))\n        ) : (\n          <p>No episodes info available</p>\n        )}\n      </div>\n    </Section>\n  );\n};\n\nexport default SeriesDetails;\n","import { useEffect } from 'react';\n\nimport styled from 'styled-components';\n\nimport { useParams } from 'react-router-dom';\n\nimport SeriesDetail from 'components/SeriesDetail';\nimport { Loading, Issue } from 'components/Boxes';\n\nimport { RootState } from 'store';\nimport { useAppSelector, useAppDispatch } from 'store/hooks';\nimport { fetchDetailsAsync } from 'store/series';\n\nconst Wrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 1rem;\n  width: 100%;\n`;\n\nconst WrapStart = styled(Wrap)`\n  align-self: start;\n`;\n\nconst Details = () => {\n  const { id } = useParams() as {\n    id: string;\n  };\n  const dispatch = useAppDispatch();\n\n  const { series, status, error } = useAppSelector((state: RootState) => ({\n    series: state.series.details.items[id],\n    status: state.series.details.status,\n    error: state.series.details.error\n  }));\n\n  useEffect(() => {\n    if (series === undefined) {\n      dispatch(fetchDetailsAsync(id));\n    }\n  }, [id, series, dispatch]);\n\n  return status === 'fulfilled' && series !== undefined ? (\n    <WrapStart>\n      <SeriesDetail item={series} />\n    </WrapStart>\n  ) : status === 'pending' ? (\n    <Wrap>\n      <Loading />\n    </Wrap>\n  ) : status === 'rejected' ? (\n    <Wrap>\n      <Issue text={error} />\n    </Wrap>\n  ) : null;\n};\n\nexport default Details;\n","import { HashRouter, Routes, Route } from 'react-router-dom';\n\nimport styled from 'styled-components';\n\nimport Navbar from 'components/Navbar';\n\nimport Home from 'screens/Home';\nimport Details from 'screens/Details';\n\nconst Main = styled.main`\n  min-height: 100%;\n  display: flex;\n  padding: 0;\n  padding-top: calc(var(--main-logo-height) + var(--navbar-padding) * 2);\n\n  max-width: 960px;\n  margin: 0 auto;\n\n  @media only screen and (min-device-width: 375px) and (max-device-width: 667px) and (orientation: landscape) {\n    max-width: 375px;\n  }\n`;\n\nconst App = () => (\n  <HashRouter>\n    <Navbar />\n    <Main>\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/details/:id\" element={<Details />} />\n      </Routes>\n    </Main>\n  </HashRouter>\n);\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\n\nimport seriesReducer from 'store/series';\n\nexport const store = configureStore({\n  reducer: {\n    series: seriesReducer\n  }\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'index.scss';\n\nimport { Provider } from 'react-redux';\n\nimport App from 'App';\n\nimport { store } from 'store';\nimport * as serviceWorker from 'serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}